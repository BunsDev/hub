{
  "/api/actives": {
    "get": {
      "summary": "Get all APIs",
      "description": "Retrieve all active APIs",
      "produces": ["application/json"],
      "responses": {
        "200": {
          "description": "List of active APIs",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "apis": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Api"
                    }
                  }
                },
                "example": {
                  "status": 200,
                  "apis": [
                    {
                      "id": "3",
                      "description": "DEX",
                      "name": "Uniswap",
                      "subtext": "Cool DEX",
                      "icon": "uniswap.icon",
                      "pointers": ["brazon.eth"],
                      "location": "ipfs://QmUvHu18pVVJu5WqWbB2YJxb7LkL4YeKpzwYhuetWqD3pj"
                    },
                    {
                      "id": "4",
                      "description": "DEX Aggregator",
                      "name": "Paraswap",
                      "subtext": "Cool aggregator",
                      "icon": "paraswap.icon",
                      "pointers": ["brazon.eth"],
                      "location": "ipfs://QmUvHu18pVVJu5WqWbB2YJxb7LkL4YeKpzwYhuetWqD3pj"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "/publish": {
    "post": {
      "summary": "Create new API",
      "parameters": [
        {
          "in": "body",
          "description": "API Metadata",
          "schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "description": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "subtext": {
                "type": "string"
              },
              "icon": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "pointers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": {
              "id": 1,
              "description": "Uniswap DEX",
              "name": "Uniswap",
              "subtext": "Cool DEX",
              "icon": "uniswap.png",
              "location": "w3//ipfs//QMabc",
              "pointers": ["uniswap.web3api.eth"]
            }
          }
        }
      ],
      "description": "Store metadata ",
      "produces": ["application/json"],
      "responses": {
        "200": {
          "description": "API was validated and created succesfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "api": {
                    "$ref": "#/definitions/Api"
                  }
                },
                "example": {
                  "status": 200,
                  "api": {
                    "id": 1,
                    "description": "Uniswap DEX",
                    "name": "Uniswap",
                    "subtext": "Cool DEX",
                    "icon": "uniswap.png",
                    "location": "w3//ipfs//QMabc",
                    "pointers": ["uniswap.web3api.eth"]
                  }
                }
              }
            }
          }
        },
        "406": {
          "description": "Pointer or location are incorrect",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "example": {
                  "status": 406,
                  "error": "Pointer: uniswap.web3api.eth is not registered"
                }
              }
            }
          }
        },
        "400": {
          "description": "Request body is wrong",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "example": {
                  "status": 400,
                  "message": "Error(s) on body: \"subtext\" is required"
                }
              }
            }
          }
        },
        "404": {
          "description": "Authentication failed",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "example": {
                  "status": 404,
                  "message": "Authentication with GitHub is required"
                }
              }
            }
          }
        },
        "500": {
          "description": "Unexpected error on APi",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "example": {
                  "status": 500,
                  "error": ""
                }
              }
            }
          }
        }
      }
    }
  }
}
